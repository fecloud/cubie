#!/bin/sh
### BEGIN INIT INFO
#
# Provides:	 httpd.js
# Required-Start:	$local_fs  $remote_fs
# Required-Stop:	$local_fs  $remote_fs
# Default-Start: 	2 3 4 5
# Default-Stop: 	0 1 6
# Short-Description:	initscript
# Description: 	This file should be used to construct scripts to be placed in /etc/init.d.
#
### END INIT INFO

## Fill in name of program here.
PROG="httpd.js"
PROG_PATH="/usr/bin/nodejs /data/app/httpd" #::# Not need, but sometimes helpful (if $PROG resides in /opt for example).
FM_ARGS="/data/f"
PH_ARGS="/data/f/photos  /data/f/thum"
PID_PATH="/var/run/"
STD_OUT="/dev/null"

start_fm(){

    pid=`ps x|grep httpd.js |grep fm |awk '{print $1}' | head -n 1`
    if [ -z "$pid" ]; then
        $PROG_PATH/$PROG fm $FM_ARGS >$STD_OUT 2>&1 &
        pid=`ps x|grep httpd.js |grep fm |awk '{print $1}' | head -n 1`
        echo "$PROG fm started $pid"
        echo $pid > "$PID_PATH/$PROG.fm.pid"
    else
        echo "Error! $PROG fm is currently running!"
    fi

}

stop_fm(){

    pid=`ps x|grep httpd.js |grep fm |awk '{print $1}' | head -n 1`
    if [ -n "$pid" ]; then
        kill -9 $pid &  rm -f  "$PID_PATH/$PROG.fm.pid"
        echo "$PROG fm stopped"
    else
        echo "Error! $PROG.fm not started!" 
    fi

}

start_arduino(){

    pid=`ps x|grep httpd.js |grep arduino |awk '{print $1}' | head -n 1`
    if [ -z "$pid" ]; then
        $PROG_PATH/$PROG arduino >$STD_OUT 2>&1 &
        pid=`ps x|grep httpd.js |grep arduino |awk '{print $1}' | head -n 1`
        echo "$PROG arduino started $pid"
        echo $pid > "$PID_PATH/$PROG.arduino.pid"
    else
        echo "Error! $PROG arduino is currently running!"
    fi

}

stop_arduino(){

    pid=`ps x|grep httpd.js |grep arduino |awk '{print $1}' | head -n 1`
    if [ -n "$pid" ]; then
        kill -9 $pid &  rm -f  "$PID_PATH/$PROG.arduino.pid"
        echo "$PROG arduino stopped"
    else
        echo "Error! $PROG.arduino not started!"
    fi

}

start_baidupansync(){

    pid=`ps x|grep httpd.js |grep baidupansync |awk '{print $1}' | head -n 1`
    if [ -z "$pid" ]; then
        $PROG_PATH/$PROG baidupansync >$STD_OUT 2>&1 &
        pid=`ps x|grep httpd.js |grep baidupansync |awk '{print $1}' | head -n 1`
        echo "$PROG baidupansync started $pid"
        echo $pid > "$PID_PATH/$PROG.baidupansync.pid"
    else
        echo "Error! $PROG baidupansync is currently running!"
    fi

}

stop_baidupansync(){

    pid=`ps x|grep httpd.js |grep baidupansync |awk '{print $1}' | head -n 1`
    if [ -n "$pid" ]; then
        kill -9 $pid &  rm -f  "$PID_PATH/$PROG.baidupansync.pid"
        echo "$PROG baidupansync stopped"
    else
        echo "Error! $PROG.baidupansync not started!" 
    fi

}

start_platform(){

    pid=`ps x|grep httpd.js |grep platform |awk '{print $1}' | head -n 1`
    if [ -z "$pid" ]; then
        $PROG_PATH/$PROG platform >$STD_OUT 2>&1 &
        pid=`ps x|grep httpd.js |grep platform |awk '{print $1}' | head -n 1`
        echo "$PROG platform started $pid"
        echo $pid > "$PID_PATH/$PROG.platform.pid"
    else
        echo "Error! $PROG platform is currently running!"
    fi

}

stop_platform(){

    pid=`ps x|grep httpd.js |grep platform |awk '{print $1}' | head -n 1`
    if [ -n "$pid" ]; then
        kill -9 $pid &  rm -f  "$PID_PATH/$PROG.platform.pid"
        echo "$PROG platform stopped"
    else
        echo "Error! $PROG.platform not started!"
    fi

}

start_photos(){

    pid=`ps x|grep httpd.js |grep photos |awk '{print $1}' | head -n 1`
    if [ -z "$pid" ]; then
        $PROG_PATH/$PROG photos $PH_ARGS >$STD_OUT 2>&1 &
        pid=`ps x|grep httpd.js |grep photos |awk '{print $1}' | head -n 1`
        echo "$PROG photos started $pid"
        echo $pid > "$PID_PATH/$PROG.photos.pid"
    else
        echo "Error! $PROG photos is currently running!"
    fi

}

stop_photos(){

    pid=`ps x|grep httpd.js |grep photos |awk '{print $1}' | head -n 1`
    if [ -n "$pid" ]; then
        kill -9 $pid &  rm -f  "$PID_PATH/$PROG.photos.pid"
        echo "$PROG photos stopped"
    else
        echo "Error! $PROG.photos not started!"
    fi

}

start() {
    echo "begin start $1"
    case "$1" in
        fm)
            start_fm
        ;;
        arduino)
            start_arduino
        ;;
        baidupansync)
            start_baidupansync
        ;;
        platform)
            start_platform
        ;;
        photos)
            start_photos
        ;;
        **)
            echo "start all"
            start_fm
            start_arduino
            start_baidupansync
            start_platform
            start_photos
        ;;
    esac

}

stop() {
    echo "begin stop $1"
    case "$1" in
        fm)
            stop_fm
        ;;
        arduino)
            stop_arduino
        ;;
        baidupansync)
            stop_baidupansync
        ;;
        platform)
            stop_platform
        ;;
         photos)
            stop_photos
        ;;
        **)
            echo "stop all"
            stop_fm
            stop_arduino
            stop_baidupansync
            stop_platform
            stop_photos
        ;;
    esac

}

## Check to see if we are running as root first.

if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi


case "$1" in
    start)
        start $2
        exit 0
    ;;
    stop)
        stop $2
        exit 0
    ;;
    reload|restart|force-reload)
        stop $2
        start $2
        exit 0
    ;;
    **)
        echo "Usage: $0 { start | stop | reload } [ fm | arduino | baidupansync | platform | photos ]" 1>&2
        exit 1
    ;;
esac

